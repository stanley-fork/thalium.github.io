<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vulnerability Research on THALIUM</title><link>/tags/vulnerability-research/</link><description>Recent content in Vulnerability Research on THALIUM</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright (c) 2020, all rights reserved.</copyright><lastBuildDate>Mon, 04 Dec 2023 08:00:00 +0000</lastBuildDate><atom:link href="/tags/vulnerability-research/index.xml" rel="self" type="application/rss+xml"/><item><title>Achieving Remote Code Execution in Steam: a journey into the Remote Play protocol</title><link>/posts/achieving-remote-code-execution-in-steam-remote-play/</link><pubDate>Mon, 04 Dec 2023 08:00:00 +0000</pubDate><guid>/posts/achieving-remote-code-execution-in-steam-remote-play/</guid><description>&lt;p>&lt;em>Remote Play Together&lt;/em>, developed by Valve, allows sharing local multi-player games with friends over the network through streaming. The associated protocol is elaborate enough to shelter a valuable attack surface that has scarcely been ventured into in the past.&lt;/p>
&lt;p>This post covers the reverse engineering of the protocol and client/server implementations inside Steam, before presenting a dedicated fuzzer that unveiled a few critical vulnerabilities.&lt;/p></description></item><item><title>Rooting Xiaomi WiFi Routers</title><link>/posts/rooting-xiaomi-wifi-routers/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>/posts/rooting-xiaomi-wifi-routers/</guid><description>In this article, we discuss our research approach for investigating Xiaomi routers. We discovered multiple vulnerabilities allowing Remote Code Execution (RCE) on several models, through both LAN and WAN interfaces. This work led to the publication of four CVEs specifically targeting Xiaomi routers.</description></item><item><title>Leveraging Android Permissions: A Solver Approach</title><link>/posts/leveraging-android-permissions/</link><pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate><guid>/posts/leveraging-android-permissions/</guid><description>&lt;p>The Android permission management system has already suffered from several vulnerabilities in the past. Such weaknesses can grant dangerous permissions to a malevolent application, an example being &lt;code>CALL_LOG&lt;/code>, which gives access to all incoming and outgoing calls.&lt;/p>
&lt;p>This post dives into the Android permission system and how a solver was leveraged to find new vulnerabilities. With this approach, a privilege escalation was identified, which was fixed and assigned CVE-2023-20947 by Google.&lt;/p></description></item><item><title>kSMBd: a quick overview</title><link>/posts/ksmbd-trailer/</link><pubDate>Fri, 12 May 2023 12:00:00 +0000</pubDate><guid>/posts/ksmbd-trailer/</guid><description>In this blogpost, we introduce the analysis of one SMB implementation: kSMBd. It will be followed up by a talk at OffensiveCon 2023 named &amp;ldquo;Abusing Linux in-kernel SMB server to gain kernel remote code execution&amp;rdquo;.</description></item><item><title>The Fuzzing Guide to the Galaxy: An Attempt with Android System Services</title><link>/posts/fuzzing-samsung-system-services/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/fuzzing-samsung-system-services/</guid><description>Although the Android base is open source, many different constructors customize it with their own UIs and APIs. All these additions represent an extra attack surface that can change from one phone model to another. We tried to automatically fuzz the closed-source system services powering these modifications, discovering &lt;code>CVE-2022-39907&lt;/code> and &lt;code>CVE-2022-39908&lt;/code> along the way.</description></item><item><title>ARM TrustZone: pivoting to the secure world</title><link>/posts/pivoting_to_the_secure_world/</link><pubDate>Fri, 24 Mar 2023 13:37:00 +0000</pubDate><guid>/posts/pivoting_to_the_secure_world/</guid><description>&lt;ol>
&lt;li>Discovery of two vulnerabilities in secure world components&lt;/li>
&lt;li>Exploitation to get code execution in a trusted driver, while not having a debugger for this obscure environment&lt;/li>
&lt;li>Leverage of aarch32 T32 instruction set to find nice stack pivots&lt;/li>
&lt;li>Turning an arbitrary write into an arbitrary code execution&lt;/li>
&lt;/ol></description></item><item><title>Fuzzing RDPEGFX with "what the fuzz"</title><link>/posts/rdpegfx/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>/posts/rdpegfx/</guid><description>Microsoft’s Remote Desktop Protocol (RDP) client was fuzzed by various teams in the past few years, it thus seemed like a good target to try a recent snapshot fuzzer: &lt;a href="https://github.com/0vercl0k/wtf">what the fuzz (wtf)&lt;/a> (of which we are only users). In this companion post to our &lt;a href="https://www.hexacon.fr/conference/speakers/#fuzzing_rdpegfx">Hexacon 2022 talk&lt;/a> (&lt;a href="/posts/misc/rdpegfx/Hexacon2022-Fuzzing_RDPEGFX_with_wtf.pdf">slides&lt;/a>, &lt;a href="https://youtu.be/4pftjmKqeoM">video&lt;/a>) we’ll show how we took advantage of wtf flexibility in order to efficiently fuzz the RDPEGFX channel of Microsoft RDP client and uncover &lt;a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-30221">CVE-2022-30221&lt;/a>.</description></item><item><title>Remote Deserialization Bug in Microsoft's RDP Client through Smart Card Extension (CVE-2021-38666)</title><link>/posts/deserialization-bug-through-rdp-smart-card-extension/</link><pubDate>Fri, 10 Dec 2021 06:00:01 +0100</pubDate><guid>/posts/deserialization-bug-through-rdp-smart-card-extension/</guid><description>&lt;p>This is the &lt;strong>third installment&lt;/strong> in my three-part series of articles on fuzzing Microsoft&amp;rsquo;s RDP client, where I explain a bug I found by fuzzing the &lt;strong>smart card extension&lt;/strong>.&lt;/p></description></item><item><title>Remote ASLR Leak in Microsoft's RDP Client through Printer Cache Registry (CVE-2021-38665)</title><link>/posts/leaking-aslr-through-rdp-printer-cache-registry/</link><pubDate>Fri, 10 Dec 2021 06:00:00 +0100</pubDate><guid>/posts/leaking-aslr-through-rdp-printer-cache-registry/</guid><description>&lt;p>This is the &lt;strong>second installment&lt;/strong> in my three-part series of articles on fuzzing Microsoft&amp;rsquo;s RDP client. I will explain a bug I found by fuzzing the &lt;strong>printer sub-protocol&lt;/strong>, and how I exploited it.&lt;/p></description></item><item><title>Fuzzing Microsoft's RDP Client using Virtual Channels: Overview &amp; Methodology</title><link>/posts/fuzzing-microsoft-rdp-client-using-virtual-channels/</link><pubDate>Wed, 10 Nov 2021 12:00:00 +0000</pubDate><guid>/posts/fuzzing-microsoft-rdp-client-using-virtual-channels/</guid><description>&lt;p>This article begins my three-part series on fuzzing Microsoft&amp;rsquo;s RDP client. In this &lt;strong>first installment&lt;/strong>, I set up a methodology for &lt;strong>fuzzing Virtual Channels&lt;/strong> using WinAFL and share some of my findings.&lt;/p></description></item></channel></rss>